generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  lastname           String?
  email              String          @unique
  emailVerified      DateTime?
  emailVerifiedToken String?         @unique
  password           String
  role               Role            @default(USER)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  stripeCustomerId   String?

  subscriptionId     String?
  currentPlan        Plan            @default(FREEMIUM)
  paymentMethods     PaymentMethod[]
  documents          Document[]
  billings           BillingInfo[]  
  usages             Usage[] // Relation vers les usages
  companyInfo        CompanyInfo[] // Relation vers l'entreprise
  invoices           Invoice[] // üîÅ Relation inverse des factures
  client             Client[]
}

enum Role {
  USER
  ADMIN
}

model Document {
  id        String   @id @default(cuid())
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model BillingInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  lastname  String
  email     String
  country   String
  address1  String
  city      String
  zip       String
  company   String?
  vat       String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  stripePaymentMethodId String   @unique
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  createdAt             DateTime @default(now())
}

enum Plan {
  FREEMIUM
  BASIC
  STANDARD
  PREMIUM
}

enum UsageType {
  invoice
  quote
  ai_request
}

model Usage {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  type      UsageType
  count     Int       @default(0)
  resetDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model CompanyInfo {
  id      String  @id @default(cuid())
  userId  String  @unique
  name    String
  address String
  zip     String
  city    String
  siret   String?
  vat     String?
  phone   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Invoice {
  id            String  @id @default(cuid())
  number        String  @unique // ex: 2024-001
  user          User    @relation(fields: [userId], references: [id])
  userId        String
  clientName    String
  clientAddress String
  clientZip     String
  clientCity    String
  clientEmail   String?
  clientPhone   String?
  clientId   String?
  client     Client? @relation(fields: [clientId], references: [id])

  status   InvoiceStatus @default(PENDING)
  issuedAt DateTime      @default(now())
  dueAt    DateTime?
  paidAt   DateTime?

  items    InvoiceItem[] // lignes (produits/services)
  totalHT  Float
  totalTVA Float
  totalTTC Float

  paymentInfo   String? // <-- infos de paiement (IBAN, instructions, etc)
  iban String?
  bic  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String

  description String
  quantity    Int
  unitPrice   Float
  vatRate     Float // ex: 20.0 pour 20 %

  totalHT  Float
  totalTVA Float
  totalTTC Float
}

enum InvoiceStatus {
  PAID
  PENDING
  FAILED
  CANCELED
}


model Client {
  id        String   @id @default(uuid())
  userId    String
  name      String
  address   String
  zip       String
  city      String
  siret     String
  vat       String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  invoices Invoice[]    // <--- RELATION INVERSE !

  @@index([userId])
}
