generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String?
  lastname          String?
  email             String          @unique
  emailVerified     DateTime?
  emailVerifiedToken String?        @unique
  password          String
  role              Role            @default(USER)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  documents         Document[]
  billings          BillingInfo[]
  stripeCustomerId  String?
  paymentMethods    PaymentMethod[]
  subscriptionId    String?
  currentPlan       Plan            @default(FREEMIUM)
  usages            Usage[]         // Relation vers les usages
  companyInfo       CompanyInfo?    // Relation vers l'entreprise
}

enum Role {
  USER
  ADMIN
}

model Document {
  id        String   @id @default(cuid())
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model BillingInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  lastname  String
  email     String
  country   String
  address1  String
  city      String
  zip       String
  company   String?
  vat       String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  stripePaymentMethodId String   @unique
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
  createdAt             DateTime @default(now())
}

enum Plan {
  FREEMIUM
  BASIC
  STANDARD
  PREMIUM
}

enum UsageType {
  invoice
  quote
  ai_request
}

model Usage {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  type      UsageType
  count     Int        @default(0)
  resetDate DateTime

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([userId, type])
}

model CompanyInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  address   String
  zip       String
  city      String
  siret     String?
  vat       String?
  phone     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}
